
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002bb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002bb0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000996d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019fb  00000000  00000000  000299e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000828  00000000  00000000  0002be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014876  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbe8  00000000  00000000  00040f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084d3f  00000000  00000000  0004caf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002584  00000000  00000000  000d1838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000d3dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002af0 	.word	0x08002af0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002af0 	.word	0x08002af0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa82 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f84a 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f924 	bl	8000470 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f8a2 	bl	8000370 <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (switch_press_count) {
 800022c:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <main+0x90>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b04      	cmp	r3, #4
 8000234:	d017      	beq.n	8000266 <main+0x4e>
 8000236:	dc23      	bgt.n	8000280 <main+0x68>
 8000238:	2b03      	cmp	r3, #3
 800023a:	d00f      	beq.n	800025c <main+0x44>
 800023c:	dc20      	bgt.n	8000280 <main+0x68>
 800023e:	2b01      	cmp	r3, #1
 8000240:	d002      	beq.n	8000248 <main+0x30>
 8000242:	2b02      	cmp	r3, #2
 8000244:	d005      	beq.n	8000252 <main+0x3a>
 8000246:	e01b      	b.n	8000280 <main+0x68>
	                case 1:
	                    blink_frequency = 2000; // 0.5 Hz (1000 ms on, 1000 ms off)
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <main+0x94>)
 800024a:	22fa      	movs	r2, #250	; 0xfa
 800024c:	00d2      	lsls	r2, r2, #3
 800024e:	601a      	str	r2, [r3, #0]
	                    break;
 8000250:	e016      	b.n	8000280 <main+0x68>
	                case 2:
	                    blink_frequency = 1000;  // 1 Hz (500 ms on, 500 ms off)
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <main+0x94>)
 8000254:	22fa      	movs	r2, #250	; 0xfa
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	601a      	str	r2, [r3, #0]
	                    break;
 800025a:	e011      	b.n	8000280 <main+0x68>
	                case 3:
	                    blink_frequency = 500;  // 2 Hz (250 ms on, 250 ms off)
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <main+0x94>)
 800025e:	22fa      	movs	r2, #250	; 0xfa
 8000260:	0052      	lsls	r2, r2, #1
 8000262:	601a      	str	r2, [r3, #0]
	                    break;
 8000264:	e00c      	b.n	8000280 <main+0x68>
	                case 4:
	                    blink_frequency = 0;    // Turn off LED
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <main+0x94>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
	                    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);
 800026c:	23a0      	movs	r3, #160	; 0xa0
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	2140      	movs	r1, #64	; 0x40
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fdfb 	bl	8000e70 <HAL_GPIO_WritePin>
	                    Enter_LowPowerMode();
 800027a:	f000 f949 	bl	8000510 <Enter_LowPowerMode>
	                    break;
 800027e:	46c0      	nop			; (mov r8, r8)
	            }

	            // Update timer period if LED is blinking
	            if (blink_frequency > 0) {
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0x94>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d009      	beq.n	800029c <main+0x84>
	                TIM3->ARR = blink_frequency-1;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x94>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <main+0x98>)
 800028e:	3a01      	subs	r2, #1
 8000290:	62da      	str	r2, [r3, #44]	; 0x2c
	                HAL_TIM_Base_Start_IT(&htim3);
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0x9c>)
 8000294:	0018      	movs	r0, r3
 8000296:	f001 fbb1 	bl	80019fc <HAL_TIM_Base_Start_IT>
 800029a:	e7c7      	b.n	800022c <main+0x14>
	            } else {
	                HAL_TIM_Base_Stop_IT(&htim3);
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0x9c>)
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fc02 	bl	8001aa8 <HAL_TIM_Base_Stop_IT>
	  switch (switch_press_count) {
 80002a4:	e7c2      	b.n	800022c <main+0x14>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000074 	.word	0x20000074
 80002ac:	20000078 	.word	0x20000078
 80002b0:	40000400 	.word	0x40000400
 80002b4:	20000028 	.word	0x20000028

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b093      	sub	sp, #76	; 0x4c
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fbe5 	bl	8002a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fbde 	bl	8002a98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fe59 	bl	8000f98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0052      	lsls	r2, r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f4:	0021      	movs	r1, r4
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2202      	movs	r2, #2
 800030c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2208      	movs	r2, #8
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0292      	lsls	r2, r2, #10
 8000320:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0592      	lsls	r2, r2, #22
 8000328:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fe73 	bl	8001018 <HAL_RCC_OscConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f90b 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2207      	movs	r2, #7
 800033e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2202      	movs	r2, #2
 8000344:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	22e0      	movs	r2, #224	; 0xe0
 8000350:	01d2      	lsls	r2, r2, #7
 8000352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2102      	movs	r1, #2
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f96d 	bl	8001638 <HAL_RCC_ClockConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000362:	f000 f8f5 	bl	8000550 <Error_Handler>
  }
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b013      	add	sp, #76	; 0x4c
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08e      	sub	sp, #56	; 0x38
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	2328      	movs	r3, #40	; 0x28
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	2310      	movs	r3, #16
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 fb89 	bl	8002a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	231c      	movs	r3, #28
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	230c      	movs	r3, #12
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f002 fb81 	bl	8002a98 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	231c      	movs	r3, #28
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f002 fb7a 	bl	8002a98 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a4:	4b2f      	ldr	r3, [pc, #188]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <MX_TIM3_Init+0xf8>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80003aa:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <MX_TIM3_Init+0xfc>)
 80003ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b29      	ldr	r3, [pc, #164]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c8:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fabe 	bl	800194c <HAL_TIM_Base_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80003d4:	f000 f8bc 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	2128      	movs	r1, #40	; 0x28
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	0152      	lsls	r2, r2, #5
 80003e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003e2:	187a      	adds	r2, r7, r1
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003e6:	0011      	movs	r1, r2
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fdf3 	bl	8001fd4 <HAL_TIM_ConfigClockSource>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003f2:	f000 f8ad 	bl	8000550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_TIM3_Init+0xf4>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 fb83 	bl	8001b04 <HAL_TIM_PWM_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000402:	f000 f8a5 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000406:	211c      	movs	r1, #28
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000414:	187a      	adds	r2, r7, r1
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_TIM3_Init+0xf4>)
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fabc 	bl	8002998 <HAL_TIMEx_MasterConfigSynchronization>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000424:	f000 f894 	bl	8000550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000428:	003b      	movs	r3, r7
 800042a:	2260      	movs	r2, #96	; 0x60
 800042c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800042e:	003b      	movs	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000434:	003b      	movs	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000440:	0039      	movs	r1, r7
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_TIM3_Init+0xf4>)
 8000444:	2200      	movs	r2, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fcc4 	bl	8001dd4 <HAL_TIM_PWM_ConfigChannel>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000450:	f000 f87e 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <MX_TIM3_Init+0xf4>)
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f8ca 	bl	80005f0 <HAL_TIM_MspPostInit>

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b00e      	add	sp, #56	; 0x38
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000028 	.word	0x20000028
 8000468:	40000400 	.word	0x40000400
 800046c:	00001f3f 	.word	0x00001f3f

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b089      	sub	sp, #36	; 0x24
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	240c      	movs	r4, #12
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2314      	movs	r3, #20
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f002 fb09 	bl	8002a98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_GPIO_Init+0x98>)
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_GPIO_Init+0x98>)
 800048c:	2104      	movs	r1, #4
 800048e:	430a      	orrs	r2, r1
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_GPIO_Init+0x98>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	2204      	movs	r2, #4
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_GPIO_Init+0x98>)
 80004a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_GPIO_Init+0x98>)
 80004a4:	2120      	movs	r1, #32
 80004a6:	430a      	orrs	r2, r1
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_GPIO_Init+0x98>)
 80004ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ae:	2220      	movs	r2, #32
 80004b0:	4013      	ands	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_GPIO_Init+0x98>)
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_GPIO_Init+0x98>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_GPIO_Init+0x98>)
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : EX_SWITCH_Pin */
  GPIO_InitStruct.Pin = EX_SWITCH_Pin;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0192      	lsls	r2, r2, #6
 80004d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2284      	movs	r2, #132	; 0x84
 80004da:	0392      	lsls	r2, r2, #14
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2202      	movs	r2, #2
 80004e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EX_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	4a09      	ldr	r2, [pc, #36]	; (800050c <MX_GPIO_Init+0x9c>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f000 fa8c 	bl	8000a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	2007      	movs	r0, #7
 80004f6:	f000 fa55 	bl	80009a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004fa:	2007      	movs	r0, #7
 80004fc:	f000 fa67 	bl	80009ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b009      	add	sp, #36	; 0x24
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	50000800 	.word	0x50000800

08000510 <Enter_LowPowerMode>:

/* USER CODE BEGIN 4 */
void Enter_LowPowerMode(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    // Configure GPIOs for low power
    HAL_GPIO_DeInit(LED_GPIO_PORT, LED_PIN);
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fbd8 	bl	8000cd0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(SWITCH_GPIO_PORT, SWITCH_PIN);
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	019b      	lsls	r3, r3, #6
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <Enter_LowPowerMode+0x3c>)
 8000526:	0019      	movs	r1, r3
 8000528:	0010      	movs	r0, r2
 800052a:	f000 fbd1 	bl	8000cd0 <HAL_GPIO_DeInit>

    // Enter STOP mode
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	01db      	lsls	r3, r3, #7
 8000532:	2101      	movs	r1, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fcf7 	bl	8000f28 <HAL_PWR_EnterSTOPMode>

    // Re-configure GPIOs after waking up
    MX_GPIO_Init();
 800053a:	f7ff ff99 	bl	8000470 <MX_GPIO_Init>
    SystemClock_Config(); // Re-initialize clock after wakeup
 800053e:	f7ff febb 	bl	80002b8 <SystemClock_Config>
     HAL_ResumeTick();
 8000542:	f000 f975 	bl	8000830 <HAL_ResumeTick>
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	50000800 	.word	0x50000800

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	641a      	str	r2, [r3, #64]	; 0x40
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_MspInit+0x44>)
 800058a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d113      	bne.n	80005de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_TIM_Base_MspInit+0x48>)
 80005b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_TIM_Base_MspInit+0x48>)
 80005bc:	2102      	movs	r1, #2
 80005be:	430a      	orrs	r2, r1
 80005c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_TIM_Base_MspInit+0x48>)
 80005c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c6:	2202      	movs	r2, #2
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 f9e6 	bl	80009a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 f9f8 	bl	80009ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b004      	add	sp, #16
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	240c      	movs	r4, #12
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2314      	movs	r3, #20
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f002 fa48 	bl	8002a98 <memset>
  if(htim->Instance==TIM3)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <HAL_TIM_MspPostInit+0x70>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d122      	bne.n	8000658 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_TIM_MspPostInit+0x74>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <HAL_TIM_MspPostInit+0x74>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_TIM_MspPostInit+0x74>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f9d8 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b009      	add	sp, #36	; 0x24
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	40000400 	.word	0x40000400
 8000664:	40021000 	.word	0x40021000

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 f8b4 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_SWITCH_Pin);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	019b      	lsls	r3, r3, #6
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fc04 	bl	8000eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <TIM3_IRQHandler+0x14>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fa86 	bl	8001bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000028 	.word	0x20000028

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d4:	f7ff fff6 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fe:	f002 f9d3 	bl	8002aa8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000702:	f7ff fd89 	bl	8000218 <main>

08000706 <LoopForever>:

LoopForever:
  b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08002ba4 	.word	0x08002ba4
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	20000080 	.word	0x20000080

08000720 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_IRQHandler>
	...

08000724 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_Init+0x3c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_Init+0x3c>)
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	0049      	lsls	r1, r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f810 	bl	8000764 <HAL_InitTick>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d003      	beq.n	8000750 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e001      	b.n	8000754 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff ff04 	bl	800055c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	781b      	ldrb	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <HAL_InitTick+0x88>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d02b      	beq.n	80007d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_InitTick+0x8c>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_InitTick+0x88>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	0098      	lsls	r0, r3, #2
 800078a:	f7ff fcb9 	bl	8000100 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	0019      	movs	r1, r3
 8000792:	0020      	movs	r0, r4
 8000794:	f7ff fcb4 	bl	8000100 <__udivsi3>
 8000798:	0003      	movs	r3, r0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f927 	bl	80009ee <HAL_SYSTICK_Config>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d112      	bne.n	80007ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d80a      	bhi.n	80007c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2301      	movs	r3, #1
 80007ae:	425b      	negs	r3, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8f6 	bl	80009a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_InitTick+0x90>)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e00d      	b.n	80007dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007c0:	230f      	movs	r3, #15
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e008      	b.n	80007dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ca:	230f      	movs	r3, #15
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e003      	b.n	80007dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007dc:	230f      	movs	r3, #15
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781b      	ldrb	r3, [r3, #0]
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b005      	add	sp, #20
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	18d2      	adds	r2, r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_IncTick+0x20>)
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000008 	.word	0x20000008
 8000818:	2000007c 	.word	0x2000007c

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	2000007c 	.word	0x2000007c

08000830 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_ResumeTick+0x18>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_ResumeTick+0x18>)
 800083a:	2102      	movs	r1, #2
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	e000e010 	.word	0xe000e010

0800084c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b7f      	cmp	r3, #127	; 0x7f
 800085e:	d809      	bhi.n	8000874 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	231f      	movs	r3, #31
 8000868:	401a      	ands	r2, r3
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_EnableIRQ+0x30>)
 800086c:	2101      	movs	r1, #1
 800086e:	4091      	lsls	r1, r2
 8000870:	000a      	movs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	0002      	movs	r2, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b7f      	cmp	r3, #127	; 0x7f
 8000894:	d828      	bhi.n	80008e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000896:	4a2f      	ldr	r2, [pc, #188]	; (8000954 <__NVIC_SetPriority+0xd4>)
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	33c0      	adds	r3, #192	; 0xc0
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	589b      	ldr	r3, [r3, r2]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0011      	movs	r1, r2
 80008ac:	2203      	movs	r2, #3
 80008ae:	400a      	ands	r2, r1
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	401a      	ands	r2, r3
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	2303      	movs	r3, #3
 80008ce:	4003      	ands	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <__NVIC_SetPriority+0xd4>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	33c0      	adds	r3, #192	; 0xc0
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008e6:	e031      	b.n	800094c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0019      	movs	r1, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	400b      	ands	r3, r1
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	3306      	adds	r3, #6
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	3304      	adds	r3, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1dfa      	adds	r2, r7, #7
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	0011      	movs	r1, r2
 8000908:	2203      	movs	r2, #3
 800090a:	400a      	ands	r2, r1
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	21ff      	movs	r1, #255	; 0xff
 8000910:	4091      	lsls	r1, r2
 8000912:	000a      	movs	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	401a      	ands	r2, r3
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0018      	movs	r0, r3
 8000928:	2303      	movs	r3, #3
 800092a:	4003      	ands	r3, r0
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <__NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	001c      	movs	r4, r3
 8000938:	230f      	movs	r3, #15
 800093a:	4023      	ands	r3, r4
 800093c:	3b08      	subs	r3, #8
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	430a      	orrs	r2, r1
 8000942:	3306      	adds	r3, #6
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	18c3      	adds	r3, r0, r3
 8000948:	3304      	adds	r3, #4
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	045b      	lsls	r3, r3, #17
 800096c:	429a      	cmp	r2, r3
 800096e:	d301      	bcc.n	8000974 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000970:	2301      	movs	r3, #1
 8000972:	e010      	b.n	8000996 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <SysTick_Config+0x44>)
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	3a01      	subs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2103      	movs	r1, #3
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff ff7c 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x44>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	210f      	movs	r1, #15
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	1c02      	adds	r2, r0, #0
 80009b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff5d 	bl	8000880 <__NVIC_SetPriority>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	0002      	movs	r2, r0
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff33 	bl	800084c <__NVIC_EnableIRQ>
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ffaf 	bl	800095c <SysTick_Config>
 80009fe:	0003      	movs	r3, r0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e147      	b.n	8000ca8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d100      	bne.n	8000a30 <HAL_GPIO_Init+0x28>
 8000a2e:	e138      	b.n	8000ca2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2203      	movs	r2, #3
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d005      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2203      	movs	r2, #3
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	409a      	lsls	r2, r3
 8000a56:	0013      	movs	r3, r2
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	0013      	movs	r3, r2
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	2201      	movs	r2, #1
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d017      	beq.n	8000ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	4013      	ands	r3, r2
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d123      	bne.n	8000b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	08da      	lsrs	r2, r3, #3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3208      	adds	r2, #8
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	58d3      	ldr	r3, [r2, r3]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2207      	movs	r2, #7
 8000b04:	4013      	ands	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	400b      	ands	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	08da      	lsrs	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3208      	adds	r2, #8
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	6939      	ldr	r1, [r7, #16]
 8000b38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	401a      	ands	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	029b      	lsls	r3, r3, #10
 8000b76:	4013      	ands	r3, r2
 8000b78:	d100      	bne.n	8000b7c <HAL_GPIO_Init+0x174>
 8000b7a:	e092      	b.n	8000ca2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b7c:	4a50      	ldr	r2, [pc, #320]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3318      	adds	r3, #24
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	589b      	ldr	r3, [r3, r2]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	220f      	movs	r2, #15
 8000b94:	409a      	lsls	r2, r3
 8000b96:	0013      	movs	r3, r2
 8000b98:	43da      	mvns	r2, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0x1ca>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a45      	ldr	r2, [pc, #276]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00d      	beq.n	8000bce <HAL_GPIO_Init+0x1c6>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a44      	ldr	r2, [pc, #272]	; (8000cc8 <HAL_GPIO_Init+0x2c0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d007      	beq.n	8000bca <HAL_GPIO_Init+0x1c2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a43      	ldr	r2, [pc, #268]	; (8000ccc <HAL_GPIO_Init+0x2c4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_GPIO_Init+0x1be>
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x1cc>
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	e004      	b.n	8000bd4 <HAL_GPIO_Init+0x1cc>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_Init+0x1cc>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x1cc>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	400a      	ands	r2, r1
 8000bda:	00d2      	lsls	r2, r2, #3
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000be4:	4936      	ldr	r1, [pc, #216]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3318      	adds	r3, #24
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	035b      	lsls	r3, r3, #13
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	039b      	lsls	r3, r3, #14
 8000c34:	4013      	ands	r3, r2
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c48:	2384      	movs	r3, #132	; 0x84
 8000c4a:	58d3      	ldr	r3, [r2, r3]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43da      	mvns	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c6c:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	2284      	movs	r2, #132	; 0x84
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	58d3      	ldr	r3, [r2, r3]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	025b      	lsls	r3, r3, #9
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c9a:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	40da      	lsrs	r2, r3
 8000cb0:	1e13      	subs	r3, r2, #0
 8000cb2:	d000      	beq.n	8000cb6 <HAL_GPIO_Init+0x2ae>
 8000cb4:	e6b0      	b.n	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b006      	add	sp, #24
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021800 	.word	0x40021800
 8000cc4:	50000400 	.word	0x50000400
 8000cc8:	50000800 	.word	0x50000800
 8000ccc:	50000c00 	.word	0x50000c00

08000cd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000cde:	e0b4      	b.n	8000e4a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_DeInit+0x24>
 8000cf2:	e0a7      	b.n	8000e44 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8000cf4:	4a5a      	ldr	r2, [pc, #360]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3318      	adds	r3, #24
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	589b      	ldr	r3, [r3, r2]
 8000d00:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_DeInit+0x76>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_GPIO_DeInit+0x194>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_GPIO_DeInit+0x72>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4f      	ldr	r2, [pc, #316]	; (8000e68 <HAL_GPIO_DeInit+0x198>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_DeInit+0x6e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <HAL_GPIO_DeInit+0x19c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_GPIO_DeInit+0x6a>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_DeInit+0x78>
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	e004      	b.n	8000d48 <HAL_GPIO_DeInit+0x78>
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e002      	b.n	8000d48 <HAL_GPIO_DeInit+0x78>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <HAL_GPIO_DeInit+0x78>
 8000d46:	2300      	movs	r3, #0
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	00d2      	lsls	r2, r2, #3
 8000d50:	4093      	lsls	r3, r2
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d136      	bne.n	8000dc6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000d58:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	58d3      	ldr	r3, [r2, r3]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	493f      	ldr	r1, [pc, #252]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8000d6a:	4a3d      	ldr	r2, [pc, #244]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d6c:	2384      	movs	r3, #132	; 0x84
 8000d6e:	58d3      	ldr	r3, [r2, r3]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	43d2      	mvns	r2, r2
 8000d74:	493a      	ldr	r1, [pc, #232]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	2284      	movs	r2, #132	; 0x84
 8000d7a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000d7c:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d86:	400a      	ands	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43d9      	mvns	r1, r3
 8000d92:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	220f      	movs	r2, #15
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8000da8:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3318      	adds	r3, #24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	589a      	ldr	r2, [r3, r2]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	4829      	ldr	r0, [pc, #164]	; (8000e60 <HAL_GPIO_DeInit+0x190>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	3318      	adds	r3, #24
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2103      	movs	r1, #3
 8000dd0:	4099      	lsls	r1, r3
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	58d3      	ldr	r3, [r2, r3]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	2107      	movs	r1, #7
 8000dea:	400a      	ands	r2, r1
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	210f      	movs	r1, #15
 8000df0:	4091      	lsls	r1, r2
 8000df2:	000a      	movs	r2, r1
 8000df4:	43d1      	mvns	r1, r2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	08d2      	lsrs	r2, r2, #3
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	0052      	lsls	r2, r2, #1
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	401a      	ands	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	4091      	lsls	r1, r2
 8000e24:	000a      	movs	r2, r1
 8000e26:	43d2      	mvns	r2, r2
 8000e28:	401a      	ands	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	0052      	lsls	r2, r2, #1
 8000e36:	2103      	movs	r1, #3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	1e13      	subs	r3, r2, #0
 8000e52:	d000      	beq.n	8000e56 <HAL_GPIO_DeInit+0x186>
 8000e54:	e744      	b.n	8000ce0 <HAL_GPIO_DeInit+0x10>
  }
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b006      	add	sp, #24
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021800 	.word	0x40021800
 8000e64:	50000400 	.word	0x50000400
 8000e68:	50000800 	.word	0x50000800
 8000e6c:	50000c00 	.word	0x50000c00

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	0008      	movs	r0, r1
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	1c02      	adds	r2, r0, #0
 8000e80:	801a      	strh	r2, [r3, #0]
 8000e82:	1c7b      	adds	r3, r7, #1
 8000e84:	1c0a      	adds	r2, r1, #0
 8000e86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e88:	1c7b      	adds	r3, r7, #1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e98:	e003      	b.n	8000ea2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9a:	1cbb      	adds	r3, r7, #2
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	1dba      	adds	r2, r7, #6
 8000ebe:	8812      	ldrh	r2, [r2, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d008      	beq.n	8000ed6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ec6:	1dba      	adds	r2, r7, #6
 8000ec8:	8812      	ldrh	r2, [r2, #0]
 8000eca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 f815 	bl	8000f00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	1dba      	adds	r2, r7, #6
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d008      	beq.n	8000ef4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ee4:	1dba      	adds	r2, r7, #6
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000eea:	1dbb      	adds	r3, r7, #6
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 f810 	bl	8000f14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021800 	.word	0x40021800

08000f00 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	0002      	movs	r2, r0
 8000f08:	1dbb      	adds	r3, r7, #6
 8000f0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	000a      	movs	r2, r1
 8000f32:	1cfb      	adds	r3, r7, #3
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d009      	beq.n	8000f50 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_PWR_EnterSTOPMode+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2207      	movs	r2, #7
 8000f42:	4393      	bics	r3, r2
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_PWR_EnterSTOPMode+0x68>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e005      	b.n	8000f5c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_PWR_EnterSTOPMode+0x68>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_PWR_EnterSTOPMode+0x68>)
 8000f56:	2107      	movs	r1, #7
 8000f58:	438a      	bics	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_PWR_EnterSTOPMode+0x6c>)
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_PWR_EnterSTOPMode+0x6c>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	430a      	orrs	r2, r1
 8000f66:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8000f68:	1cfb      	adds	r3, r7, #3
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f70:	bf30      	wfi
 8000f72:	e002      	b.n	8000f7a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000f74:	bf40      	sev
    __WFE();
 8000f76:	bf20      	wfe
    __WFE();
 8000f78:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_PWR_EnterSTOPMode+0x6c>)
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_PWR_EnterSTOPMode+0x6c>)
 8000f80:	2104      	movs	r1, #4
 8000f82:	438a      	bics	r2, r1
 8000f84:	611a      	str	r2, [r3, #16]
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40007000 	.word	0x40007000
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d11f      	bne.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4912      	ldr	r1, [pc, #72]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff f898 	bl	8000100 <__udivsi3>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd6:	e008      	b.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e001      	b.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e009      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d0ed      	beq.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40007000 	.word	0x40007000
 800100c:	fffff9ff 	.word	0xfffff9ff
 8001010:	20000000 	.word	0x20000000
 8001014:	000f4240 	.word	0x000f4240

08001018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e2f3      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x1e>
 8001034:	e07c      	b.n	8001130 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001036:	4bc3      	ldr	r3, [pc, #780]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2238      	movs	r2, #56	; 0x38
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001040:	4bc0      	ldr	r3, [pc, #768]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
 8001048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b10      	cmp	r3, #16
 800104e:	d102      	bne.n	8001056 <HAL_RCC_OscConfig+0x3e>
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d002      	beq.n	800105c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d10b      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4bb9      	ldr	r3, [pc, #740]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	d062      	beq.n	800112e <HAL_RCC_OscConfig+0x116>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d15e      	bne.n	800112e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e2ce      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	429a      	cmp	r2, r3
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x78>
 8001080:	4bb0      	ldr	r3, [pc, #704]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4baf      	ldr	r3, [pc, #700]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0249      	lsls	r1, r1, #9
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e020      	b.n	80010d2 <HAL_RCC_OscConfig+0xba>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	02db      	lsls	r3, r3, #11
 8001098:	429a      	cmp	r2, r3
 800109a:	d10e      	bne.n	80010ba <HAL_RCC_OscConfig+0xa2>
 800109c:	4ba9      	ldr	r3, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	02c9      	lsls	r1, r1, #11
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4ba5      	ldr	r3, [pc, #660]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0249      	lsls	r1, r1, #9
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e00b      	b.n	80010d2 <HAL_RCC_OscConfig+0xba>
 80010ba:	4ba2      	ldr	r3, [pc, #648]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4ba1      	ldr	r3, [pc, #644]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	49a1      	ldr	r1, [pc, #644]	; (8001348 <HAL_RCC_OscConfig+0x330>)
 80010c2:	400a      	ands	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4b9f      	ldr	r3, [pc, #636]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b9e      	ldr	r3, [pc, #632]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	499f      	ldr	r1, [pc, #636]	; (800134c <HAL_RCC_OscConfig+0x334>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d014      	beq.n	8001104 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010da:	f7ff fb9f 	bl	800081c <HAL_GetTick>
 80010de:	0003      	movs	r3, r0
 80010e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fb9a 	bl	800081c <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e28d      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	4b93      	ldr	r3, [pc, #588]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	029b      	lsls	r3, r3, #10
 80010fe:	4013      	ands	r3, r2
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0xcc>
 8001102:	e015      	b.n	8001130 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fb8a 	bl	800081c <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110e:	f7ff fb85 	bl	800081c <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e278      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	4013      	ands	r3, r2
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0xf6>
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	4013      	ands	r3, r2
 8001138:	d100      	bne.n	800113c <HAL_RCC_OscConfig+0x124>
 800113a:	e099      	b.n	8001270 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2238      	movs	r2, #56	; 0x38
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b10      	cmp	r3, #16
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x144>
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d002      	beq.n	8001162 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d135      	bne.n	80011ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4013      	ands	r3, r2
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x162>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e24b      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a74      	ldr	r2, [pc, #464]	; (8001350 <HAL_RCC_OscConfig+0x338>)
 8001180:	4013      	ands	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	021a      	lsls	r2, r3, #8
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001196:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6e      	ldr	r2, [pc, #440]	; (8001354 <HAL_RCC_OscConfig+0x33c>)
 800119c:	4013      	ands	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011aa:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0adb      	lsrs	r3, r3, #11
 80011b0:	2207      	movs	r2, #7
 80011b2:	4013      	ands	r3, r2
 80011b4:	4a68      	ldr	r2, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x340>)
 80011b6:	40da      	lsrs	r2, r3
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <HAL_RCC_OscConfig+0x344>)
 80011ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x348>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff facf 	bl	8000764 <HAL_InitTick>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d051      	beq.n	800126e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e221      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d030      	beq.n	8001238 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011d6:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_RCC_OscConfig+0x33c>)
 80011dc:	4013      	ands	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	4b57      	ldr	r3, [pc, #348]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b55      	ldr	r3, [pc, #340]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0049      	lsls	r1, r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb10 	bl	800081c <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fb0b 	bl	800081c <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1fe      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001214:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4013      	ands	r3, r2
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b48      	ldr	r3, [pc, #288]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_RCC_OscConfig+0x338>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	021a      	lsls	r2, r3, #8
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	e01b      	b.n	8001270 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800123e:	4949      	ldr	r1, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x34c>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff faea 	bl	800081c <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fae5 	bl	800081c <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1d8      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4013      	ands	r3, r2
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x236>
 800126c:	e000      	b.n	8001270 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2208      	movs	r2, #8
 8001276:	4013      	ands	r3, r2
 8001278:	d047      	beq.n	800130a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2238      	movs	r2, #56	; 0x38
 8001280:	4013      	ands	r3, r2
 8001282:	2b18      	cmp	r3, #24
 8001284:	d10a      	bne.n	800129c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d03c      	beq.n	800130a <HAL_RCC_OscConfig+0x2f2>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d138      	bne.n	800130a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e1ba      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d019      	beq.n	80012d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fab4 	bl	800081c <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff faaf 	bl	800081c <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e1a2      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d0f1      	beq.n	80012ba <HAL_RCC_OscConfig+0x2a2>
 80012d6:	e018      	b.n	800130a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80012da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fa9a 	bl	800081c <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fa95 	bl	800081c <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e188      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d1f1      	bne.n	80012ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d100      	bne.n	8001316 <HAL_RCC_OscConfig+0x2fe>
 8001314:	e0c6      	b.n	80014a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	231f      	movs	r3, #31
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2238      	movs	r2, #56	; 0x38
 8001324:	4013      	ands	r3, r2
 8001326:	2b20      	cmp	r3, #32
 8001328:	d11e      	bne.n	8001368 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d100      	bne.n	8001336 <HAL_RCC_OscConfig+0x31e>
 8001334:	e0b6      	b.n	80014a4 <HAL_RCC_OscConfig+0x48c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d000      	beq.n	8001340 <HAL_RCC_OscConfig+0x328>
 800133e:	e0b1      	b.n	80014a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e166      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
 8001344:	40021000 	.word	0x40021000
 8001348:	fffeffff 	.word	0xfffeffff
 800134c:	fffbffff 	.word	0xfffbffff
 8001350:	ffff80ff 	.word	0xffff80ff
 8001354:	ffffc7ff 	.word	0xffffc7ff
 8001358:	00f42400 	.word	0x00f42400
 800135c:	20000000 	.word	0x20000000
 8001360:	20000004 	.word	0x20000004
 8001364:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001368:	4bac      	ldr	r3, [pc, #688]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800136a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	055b      	lsls	r3, r3, #21
 8001370:	4013      	ands	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x360>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x362>
 8001378:	2300      	movs	r3, #0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4ba7      	ldr	r3, [pc, #668]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001382:	4ba6      	ldr	r3, [pc, #664]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0549      	lsls	r1, r1, #21
 8001388:	430a      	orrs	r2, r1
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c
 800138c:	4ba3      	ldr	r3, [pc, #652]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800138e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	055b      	lsls	r3, r3, #21
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800139a:	231f      	movs	r3, #31
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a2:	4b9f      	ldr	r3, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x608>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d11a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ae:	4b9c      	ldr	r3, [pc, #624]	; (8001620 <HAL_RCC_OscConfig+0x608>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b9b      	ldr	r3, [pc, #620]	; (8001620 <HAL_RCC_OscConfig+0x608>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0049      	lsls	r1, r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fa2e 	bl	800081c <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fa29 	bl	800081c <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e11c      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d8:	4b91      	ldr	r3, [pc, #580]	; (8001620 <HAL_RCC_OscConfig+0x608>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x3e2>
 80013ec:	4b8b      	ldr	r3, [pc, #556]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80013ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013f0:	4b8a      	ldr	r3, [pc, #552]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x41c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x404>
 8001402:	4b86      	ldr	r3, [pc, #536]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001406:	4b85      	ldr	r3, [pc, #532]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001408:	2104      	movs	r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	65da      	str	r2, [r3, #92]	; 0x5c
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001412:	4b82      	ldr	r3, [pc, #520]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x41c>
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800141e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001420:	4b7e      	ldr	r3, [pc, #504]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	65da      	str	r2, [r3, #92]	; 0x5c
 8001428:	4b7c      	ldr	r3, [pc, #496]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800142a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800142c:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800142e:	2104      	movs	r1, #4
 8001430:	438a      	bics	r2, r1
 8001432:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d014      	beq.n	8001466 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff f9ee 	bl	800081c <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001444:	e009      	b.n	800145a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff f9e9 	bl	800081c <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	4a74      	ldr	r2, [pc, #464]	; (8001624 <HAL_RCC_OscConfig+0x60c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0db      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145a:	4b70      	ldr	r3, [pc, #448]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x42e>
 8001464:	e013      	b.n	800148e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f9d9 	bl	800081c <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800146e:	e009      	b.n	8001484 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff f9d4 	bl	800081c <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x60c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0c6      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800148e:	231f      	movs	r3, #31
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800149a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800149e:	4962      	ldr	r1, [pc, #392]	; (8001628 <HAL_RCC_OscConfig+0x610>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x496>
 80014ac:	e0b0      	b.n	8001610 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d100      	bne.n	80014bc <HAL_RCC_OscConfig+0x4a4>
 80014ba:	e078      	b.n	80015ae <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d153      	bne.n	800156c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b54      	ldr	r3, [pc, #336]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80014ca:	4958      	ldr	r1, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x614>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff f9a4 	bl	800081c <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff f99f 	bl	800081c <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e092      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ec:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	049b      	lsls	r3, r3, #18
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x618>)
 80014fe:	4013      	ands	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	431a      	orrs	r2, r3
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	0449      	lsls	r1, r1, #17
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	0549      	lsls	r1, r1, #21
 800153e:	430a      	orrs	r2, r1
 8001540:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff f96b 	bl	800081c <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff f966 	bl	800081c <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e059      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	049b      	lsls	r3, r3, #18
 8001566:	4013      	ands	r3, r2
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x534>
 800156a:	e051      	b.n	8001610 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_RCC_OscConfig+0x604>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001572:	492e      	ldr	r1, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x614>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff f950 	bl	800081c <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff f94b 	bl	800081c <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e03e      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_RCC_OscConfig+0x604>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	049b      	lsls	r3, r3, #18
 800159c:	4013      	ands	r3, r2
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80015a6:	4923      	ldr	r1, [pc, #140]	; (8001634 <HAL_RCC_OscConfig+0x61c>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e030      	b.n	8001610 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e02b      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_RCC_OscConfig+0x604>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2203      	movs	r2, #3
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d11e      	bne.n	800160c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2270      	movs	r2, #112	; 0x70
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d117      	bne.n	800160c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	23fe      	movs	r3, #254	; 0xfe
 80015e0:	01db      	lsls	r3, r3, #7
 80015e2:	401a      	ands	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	23f8      	movs	r3, #248	; 0xf8
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	0f5b      	lsrs	r3, r3, #29
 8001602:	075a      	lsls	r2, r3, #29
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b008      	add	sp, #32
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	00001388 	.word	0x00001388
 8001628:	efffffff 	.word	0xefffffff
 800162c:	feffffff 	.word	0xfeffffff
 8001630:	1fc1808c 	.word	0x1fc1808c
 8001634:	effefffc 	.word	0xeffefffc

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0e9      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b76      	ldr	r3, [pc, #472]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2207      	movs	r2, #7
 8001652:	4013      	ands	r3, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d91e      	bls.n	8001698 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2207      	movs	r2, #7
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800166c:	f7ff f8d6 	bl	800081c <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001674:	e009      	b.n	800168a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001676:	f7ff f8d1 	bl	800081c <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_RCC_ClockConfig+0x1f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0ca      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2207      	movs	r2, #7
 8001690:	4013      	ands	r3, r2
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d1ee      	bne.n	8001676 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2202      	movs	r2, #2
 800169e:	4013      	ands	r3, r2
 80016a0:	d015      	beq.n	80016ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2204      	movs	r2, #4
 80016a8:	4013      	ands	r3, r2
 80016aa:	d006      	beq.n	80016ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016ac:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	21e0      	movs	r1, #224	; 0xe0
 80016b4:	01c9      	lsls	r1, r1, #7
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4a5d      	ldr	r2, [pc, #372]	; (8001834 <HAL_RCC_ClockConfig+0x1fc>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d057      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d12b      	bne.n	8001744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e097      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	049b      	lsls	r3, r3, #18
 8001700:	4013      	ands	r3, r2
 8001702:	d11f      	bne.n	8001744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e08b      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4013      	ands	r3, r2
 800171a:	d113      	bne.n	8001744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07f      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d106      	bne.n	8001736 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	2202      	movs	r2, #2
 800172e:	4013      	ands	r3, r2
 8001730:	d108      	bne.n	8001744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e074      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e06d      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001744:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2207      	movs	r2, #7
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001758:	f7ff f860 	bl	800081c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f85b 	bl	800081c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a2f      	ldr	r2, [pc, #188]	; (800182c <HAL_RCC_ClockConfig+0x1f4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e054      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2238      	movs	r2, #56	; 0x38
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	429a      	cmp	r2, r3
 8001786:	d1ec      	bne.n	8001762 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2207      	movs	r2, #7
 800178e:	4013      	ands	r3, r2
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d21e      	bcs.n	80017d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2207      	movs	r2, #7
 800179c:	4393      	bics	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017a8:	f7ff f838 	bl	800081c <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b0:	e009      	b.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b2:	f7ff f833 	bl	800081c <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_RCC_ClockConfig+0x1f4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e02c      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2207      	movs	r2, #7
 80017cc:	4013      	ands	r3, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1ee      	bne.n	80017b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_RCC_ClockConfig+0x200>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017f2:	f000 f829 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 80017f6:	0001      	movs	r1, r0
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	220f      	movs	r2, #15
 8001800:	401a      	ands	r2, r3
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x204>)
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	58d3      	ldr	r3, [r2, r3]
 8001808:	221f      	movs	r2, #31
 800180a:	4013      	ands	r3, r2
 800180c:	000a      	movs	r2, r1
 800180e:	40da      	lsrs	r2, r3
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_ClockConfig+0x208>)
 8001812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x20c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0018      	movs	r0, r3
 800181a:	f7fe ffa3 	bl	8000764 <HAL_InitTick>
 800181e:	0003      	movs	r3, r0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b004      	add	sp, #16
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40022000 	.word	0x40022000
 800182c:	00001388 	.word	0x00001388
 8001830:	40021000 	.word	0x40021000
 8001834:	fffff0ff 	.word	0xfffff0ff
 8001838:	ffff8fff 	.word	0xffff8fff
 800183c:	08002b08 	.word	0x08002b08
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2238      	movs	r2, #56	; 0x38
 8001854:	4013      	ands	r3, r2
 8001856:	d10f      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0adb      	lsrs	r3, r3, #11
 800185e:	2207      	movs	r2, #7
 8001860:	4013      	ands	r3, r2
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	4835      	ldr	r0, [pc, #212]	; (8001944 <HAL_RCC_GetSysClockFreq+0xfc>)
 800186e:	f7fe fc47 	bl	8000100 <__udivsi3>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e05d      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2238      	movs	r2, #56	; 0x38
 800187e:	4013      	ands	r3, r2
 8001880:	2b08      	cmp	r3, #8
 8001882:	d102      	bne.n	800188a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_GetSysClockFreq+0x100>)
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e054      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2238      	movs	r2, #56	; 0x38
 8001890:	4013      	ands	r3, r2
 8001892:	2b10      	cmp	r3, #16
 8001894:	d138      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2203      	movs	r2, #3
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	2207      	movs	r2, #7
 80018a8:	4013      	ands	r3, r2
 80018aa:	3301      	adds	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	4824      	ldr	r0, [pc, #144]	; (8001948 <HAL_RCC_GetSysClockFreq+0x100>)
 80018b8:	f7fe fc22 	bl	8000100 <__udivsi3>
 80018bc:	0003      	movs	r3, r0
 80018be:	0019      	movs	r1, r3
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	227f      	movs	r2, #127	; 0x7f
 80018c8:	4013      	ands	r3, r2
 80018ca:	434b      	muls	r3, r1
 80018cc:	617b      	str	r3, [r7, #20]
        break;
 80018ce:	e00d      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	481c      	ldr	r0, [pc, #112]	; (8001944 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018d4:	f7fe fc14 	bl	8000100 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	0019      	movs	r1, r3
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	227f      	movs	r2, #127	; 0x7f
 80018e4:	4013      	ands	r3, r2
 80018e6:	434b      	muls	r3, r1
 80018e8:	617b      	str	r3, [r7, #20]
        break;
 80018ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0f5b      	lsrs	r3, r3, #29
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	3301      	adds	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	6978      	ldr	r0, [r7, #20]
 80018fe:	f7fe fbff 	bl	8000100 <__udivsi3>
 8001902:	0003      	movs	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e015      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2238      	movs	r2, #56	; 0x38
 800190e:	4013      	ands	r3, r2
 8001910:	2b20      	cmp	r3, #32
 8001912:	d103      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2238      	movs	r2, #56	; 0x38
 8001922:	4013      	ands	r3, r2
 8001924:	2b18      	cmp	r3, #24
 8001926:	d103      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001928:	23fa      	movs	r3, #250	; 0xfa
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e001      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001934:	693b      	ldr	r3, [r7, #16]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b006      	add	sp, #24
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40021000 	.word	0x40021000
 8001944:	00f42400 	.word	0x00f42400
 8001948:	007a1200 	.word	0x007a1200

0800194c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e04a      	b.n	80019f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	223d      	movs	r2, #61	; 0x3d
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	223c      	movs	r2, #60	; 0x3c
 800196e:	2100      	movs	r1, #0
 8001970:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f7fe fe15 	bl	80005a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	223d      	movs	r2, #61	; 0x3d
 800197e:	2102      	movs	r1, #2
 8001980:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	0019      	movs	r1, r3
 800198c:	0010      	movs	r0, r2
 800198e:	f000 fc1f 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2248      	movs	r2, #72	; 0x48
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	223e      	movs	r2, #62	; 0x3e
 800199e:	2101      	movs	r1, #1
 80019a0:	5499      	strb	r1, [r3, r2]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	5499      	strb	r1, [r3, r2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2241      	movs	r2, #65	; 0x41
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2242      	movs	r2, #66	; 0x42
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2243      	movs	r2, #67	; 0x43
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2244      	movs	r2, #68	; 0x44
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2245      	movs	r2, #69	; 0x45
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2246      	movs	r2, #70	; 0x46
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2247      	movs	r2, #71	; 0x47
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	223d      	movs	r2, #61	; 0x3d
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	223d      	movs	r2, #61	; 0x3d
 8001a08:	5c9b      	ldrb	r3, [r3, r2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d001      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e03c      	b.n	8001a8e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	223d      	movs	r2, #61	; 0x3d
 8001a18:	2102      	movs	r1, #2
 8001a1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x4e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x4e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d016      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x8e>
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d011      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a76:	e008      	b.n	8001a8a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2101      	movs	r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e000      	b.n	8001a8c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	00010007 	.word	0x00010007

08001aa8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	438a      	bics	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_TIM_Base_Stop_IT+0x54>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d10d      	bne.n	8001ae8 <HAL_TIM_Base_Stop_IT+0x40>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_TIM_Base_Stop_IT+0x58>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_Base_Stop_IT+0x40>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	223d      	movs	r2, #61	; 0x3d
 8001aec:	2101      	movs	r1, #1
 8001aee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	00001111 	.word	0x00001111
 8001b00:	00000444 	.word	0x00000444

08001b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e04a      	b.n	8001bac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223d      	movs	r2, #61	; 0x3d
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	223c      	movs	r2, #60	; 0x3c
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 f841 	bl	8001bb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223d      	movs	r2, #61	; 0x3d
 8001b36:	2102      	movs	r1, #2
 8001b38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f000 fb43 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2248      	movs	r2, #72	; 0x48
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	223e      	movs	r2, #62	; 0x3e
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2241      	movs	r2, #65	; 0x41
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2243      	movs	r2, #67	; 0x43
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2244      	movs	r2, #68	; 0x44
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2245      	movs	r2, #69	; 0x45
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2246      	movs	r2, #70	; 0x46
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2247      	movs	r2, #71	; 0x47
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	223d      	movs	r2, #61	; 0x3d
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d021      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d01d      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	d004      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fac8 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e007      	b.n	8001c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 fabb 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fac7 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2204      	movs	r2, #4
 8001c34:	4013      	ands	r3, r2
 8001c36:	d01e      	beq.n	8001c76 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	4252      	negs	r2, r2
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 faa1 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001c5e:	e007      	b.n	8001c70 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fa94 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 faa0 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d021      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2208      	movs	r2, #8
 8001c82:	4013      	ands	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2209      	movs	r2, #9
 8001c8c:	4252      	negs	r2, r2
 8001c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fa7b 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 fa6e 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 fa7a 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d01e      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2211      	movs	r2, #17
 8001cd8:	4252      	negs	r2, r2
 8001cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2208      	movs	r2, #8
 8001ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	23c0      	movs	r3, #192	; 0xc0
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fa54 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e007      	b.n	8001d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fa47 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fa53 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d00c      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d008      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2202      	movs	r2, #2
 8001d26:	4252      	negs	r2, r2
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 fa27 	bl	8002180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	4013      	ands	r3, r2
 8001d38:	d104      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	019b      	lsls	r3, r3, #6
 8001d40:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d42:	d00b      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_TIM_IRQHandler+0x208>)
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fe8e 	bl	8002a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00b      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_TIM_IRQHandler+0x20c>)
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fe85 	bl	8002a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	4013      	ands	r3, r2
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2240      	movs	r2, #64	; 0x40
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d008      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2241      	movs	r2, #65	; 0x41
 8001d94:	4252      	negs	r2, r2
 8001d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa10 	bl	80021c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2220      	movs	r2, #32
 8001da4:	4013      	ands	r3, r2
 8001da6:	d00c      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	4013      	ands	r3, r2
 8001dae:	d008      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	4252      	negs	r2, r2
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fe53 	bl	8002a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	ffffdf7f 	.word	0xffffdf7f
 8001dd0:	fffffeff 	.word	0xfffffeff

08001dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2317      	movs	r3, #23
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	223c      	movs	r2, #60	; 0x3c
 8001dec:	5c9b      	ldrb	r3, [r3, r2]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e0e5      	b.n	8001fc2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	223c      	movs	r2, #60	; 0x3c
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b14      	cmp	r3, #20
 8001e02:	d900      	bls.n	8001e06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e04:	e0d1      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001e0c:	18d3      	adds	r3, r2, r3
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	0011      	movs	r1, r2
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 fa5c 	bl	80022d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6999      	ldr	r1, [r3, #24]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	619a      	str	r2, [r3, #24]
      break;
 8001e52:	e0af      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 fac5 	bl	80023ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0109      	lsls	r1, r1, #4
 8001e70:	430a      	orrs	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4954      	ldr	r1, [pc, #336]	; (8001fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6999      	ldr	r1, [r3, #24]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]
      break;
 8001e98:	e08c      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 fb26 	bl	80024f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69d9      	ldr	r1, [r3, #28]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	61da      	str	r2, [r3, #28]
      break;
 8001eda:	e06b      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fb8d 	bl	8002604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0109      	lsls	r1, r1, #4
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4932      	ldr	r1, [pc, #200]	; (8001fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69d9      	ldr	r1, [r3, #28]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	61da      	str	r2, [r3, #28]
      break;
 8001f20:	e048      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fbd4 	bl	80026d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f62:	e027      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fc13 	bl	8002798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0109      	lsls	r1, r1, #4
 8001f80:	430a      	orrs	r2, r1
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	021a      	lsls	r2, r3, #8
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001fa8:	e004      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001faa:	2317      	movs	r3, #23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
      break;
 8001fb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	223c      	movs	r2, #60	; 0x3c
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

  return status;
 8001fbc:	2317      	movs	r3, #23
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b006      	add	sp, #24
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	08002b48 	.word	0x08002b48
 8001fd0:	fffffbff 	.word	0xfffffbff

08001fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	230f      	movs	r3, #15
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	223c      	movs	r2, #60	; 0x3c
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x20>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0bc      	b.n	800216e <HAL_TIM_ConfigClockSource+0x19a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	223c      	movs	r2, #60	; 0x3c
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	223d      	movs	r2, #61	; 0x3d
 8002000:	2102      	movs	r1, #2
 8002002:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4a59      	ldr	r2, [pc, #356]	; (800217c <HAL_TIM_ConfigClockSource+0x1a8>)
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	0192      	lsls	r2, r2, #6
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0xde>
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	0192      	lsls	r2, r2, #6
 8002034:	4293      	cmp	r3, r2
 8002036:	d900      	bls.n	800203a <HAL_TIM_ConfigClockSource+0x66>
 8002038:	e088      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0152      	lsls	r2, r2, #5
 800203e:	4293      	cmp	r3, r2
 8002040:	d100      	bne.n	8002044 <HAL_TIM_ConfigClockSource+0x70>
 8002042:	e088      	b.n	8002156 <HAL_TIM_ConfigClockSource+0x182>
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	4293      	cmp	r3, r2
 800204a:	d900      	bls.n	800204e <HAL_TIM_ConfigClockSource+0x7a>
 800204c:	e07e      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 800204e:	2b70      	cmp	r3, #112	; 0x70
 8002050:	d018      	beq.n	8002084 <HAL_TIM_ConfigClockSource+0xb0>
 8002052:	d900      	bls.n	8002056 <HAL_TIM_ConfigClockSource+0x82>
 8002054:	e07a      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 8002056:	2b60      	cmp	r3, #96	; 0x60
 8002058:	d04f      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x126>
 800205a:	d900      	bls.n	800205e <HAL_TIM_ConfigClockSource+0x8a>
 800205c:	e076      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 800205e:	2b50      	cmp	r3, #80	; 0x50
 8002060:	d03b      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x106>
 8002062:	d900      	bls.n	8002066 <HAL_TIM_ConfigClockSource+0x92>
 8002064:	e072      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d057      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x146>
 800206a:	d900      	bls.n	800206e <HAL_TIM_ConfigClockSource+0x9a>
 800206c:	e06e      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 800206e:	2b30      	cmp	r3, #48	; 0x30
 8002070:	d063      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x166>
 8002072:	d86b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d060      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x166>
 8002078:	d868      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x178>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d05d      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x166>
 800207e:	2b10      	cmp	r3, #16
 8002080:	d05b      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x166>
 8002082:	e063      	b.n	800214c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002094:	f000 fc60 	bl	8002958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2277      	movs	r2, #119	; 0x77
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	609a      	str	r2, [r3, #8]
      break;
 80020b0:	e052      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c2:	f000 fc49 	bl	8002958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	01c9      	lsls	r1, r1, #7
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
      break;
 80020d8:	e03e      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	001a      	movs	r2, r3
 80020e8:	f000 fbba 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2150      	movs	r1, #80	; 0x50
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fc14 	bl	8002920 <TIM_ITRx_SetConfig>
      break;
 80020f8:	e02e      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002106:	001a      	movs	r2, r3
 8002108:	f000 fbd8 	bl	80028bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2160      	movs	r1, #96	; 0x60
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fc04 	bl	8002920 <TIM_ITRx_SetConfig>
      break;
 8002118:	e01e      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	001a      	movs	r2, r3
 8002128:	f000 fb9a 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	; 0x40
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fbf4 	bl	8002920 <TIM_ITRx_SetConfig>
      break;
 8002138:	e00e      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0019      	movs	r1, r3
 8002144:	0010      	movs	r0, r2
 8002146:	f000 fbeb 	bl	8002920 <TIM_ITRx_SetConfig>
      break;
 800214a:	e005      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
      break;
 8002154:	e000      	b.n	8002158 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002156:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	223d      	movs	r2, #61	; 0x3d
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	223c      	movs	r2, #60	; 0x3c
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

  return status;
 8002168:	230f      	movs	r3, #15
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	781b      	ldrb	r3, [r3, #0]
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	ffceff88 	.word	0xffceff88
 800217c:	ffff00ff 	.word	0xffff00ff

08002180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <TIM_Base_SetConfig+0xec>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0x20>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <TIM_Base_SetConfig+0xf0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2270      	movs	r2, #112	; 0x70
 80021f4:	4393      	bics	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <TIM_Base_SetConfig+0xec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <TIM_Base_SetConfig+0xf0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <TIM_Base_SetConfig+0xf4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <TIM_Base_SetConfig+0xf8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <TIM_Base_SetConfig+0xfc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0x62>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <TIM_Base_SetConfig+0x100>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <TIM_Base_SetConfig+0x104>)
 8002236:	4013      	ands	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	4393      	bics	r3, r2
 800224a:	001a      	movs	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <TIM_Base_SetConfig+0xec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00b      	beq.n	800228a <TIM_Base_SetConfig+0xba>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <TIM_Base_SetConfig+0xf8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <TIM_Base_SetConfig+0xba>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <TIM_Base_SetConfig+0xfc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_Base_SetConfig+0xba>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <TIM_Base_SetConfig+0x100>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d103      	bne.n	8002292 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d106      	bne.n	80022b2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4393      	bics	r3, r2
 80022ac:	001a      	movs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]
  }
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40002000 	.word	0x40002000
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800
 80022d4:	fffffcff 	.word	0xfffffcff

080022d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4393      	bics	r3, r2
 80022f0:	001a      	movs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <TIM_OC1_SetConfig+0xf8>)
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2203      	movs	r2, #3
 800230e:	4393      	bics	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2202      	movs	r2, #2
 8002320:	4393      	bics	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <TIM_OC1_SetConfig+0xfc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00b      	beq.n	800234e <TIM_OC1_SetConfig+0x76>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <TIM_OC1_SetConfig+0x100>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <TIM_OC1_SetConfig+0x76>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <TIM_OC1_SetConfig+0x104>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_OC1_SetConfig+0x76>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <TIM_OC1_SetConfig+0x108>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10c      	bne.n	8002368 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2208      	movs	r2, #8
 8002352:	4393      	bics	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2204      	movs	r2, #4
 8002364:	4393      	bics	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <TIM_OC1_SetConfig+0xfc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00b      	beq.n	8002388 <TIM_OC1_SetConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <TIM_OC1_SetConfig+0x100>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <TIM_OC1_SetConfig+0xb0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <TIM_OC1_SetConfig+0x104>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_OC1_SetConfig+0xb0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <TIM_OC1_SetConfig+0x108>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d111      	bne.n	80023ac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <TIM_OC1_SetConfig+0x10c>)
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <TIM_OC1_SetConfig+0x110>)
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	621a      	str	r2, [r3, #32]
}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b006      	add	sp, #24
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	fffeff8f 	.word	0xfffeff8f
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800
 80023e4:	fffffeff 	.word	0xfffffeff
 80023e8:	fffffdff 	.word	0xfffffdff

080023ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	2210      	movs	r2, #16
 8002402:	4393      	bics	r3, r2
 8002404:	001a      	movs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <TIM_OC2_SetConfig+0xe8>)
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <TIM_OC2_SetConfig+0xec>)
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2220      	movs	r2, #32
 8002436:	4393      	bics	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a24      	ldr	r2, [pc, #144]	; (80024dc <TIM_OC2_SetConfig+0xf0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10d      	bne.n	800246a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	4393      	bics	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2240      	movs	r2, #64	; 0x40
 8002466:	4393      	bics	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <TIM_OC2_SetConfig+0xf0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00b      	beq.n	800248a <TIM_OC2_SetConfig+0x9e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <TIM_OC2_SetConfig+0xf4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <TIM_OC2_SetConfig+0x9e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <TIM_OC2_SetConfig+0xf8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d003      	beq.n	800248a <TIM_OC2_SetConfig+0x9e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <TIM_OC2_SetConfig+0xfc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d113      	bne.n	80024b2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <TIM_OC2_SetConfig+0x100>)
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <TIM_OC2_SetConfig+0x104>)
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	621a      	str	r2, [r3, #32]
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	feff8fff 	.word	0xfeff8fff
 80024d8:	fffffcff 	.word	0xfffffcff
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800
 80024ec:	fffffbff 	.word	0xfffffbff
 80024f0:	fffff7ff 	.word	0xfffff7ff

080024f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <TIM_OC3_SetConfig+0xe4>)
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <TIM_OC3_SetConfig+0xe8>)
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2203      	movs	r2, #3
 8002528:	4393      	bics	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <TIM_OC3_SetConfig+0xec>)
 800253a:	4013      	ands	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <TIM_OC3_SetConfig+0xf0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10d      	bne.n	800256e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <TIM_OC3_SetConfig+0xf4>)
 8002556:	4013      	ands	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <TIM_OC3_SetConfig+0xf8>)
 800256a:	4013      	ands	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <TIM_OC3_SetConfig+0xf0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00b      	beq.n	800258e <TIM_OC3_SetConfig+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <TIM_OC3_SetConfig+0xfc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_OC3_SetConfig+0x9a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <TIM_OC3_SetConfig+0x100>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_OC3_SetConfig+0x9a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <TIM_OC3_SetConfig+0x104>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d113      	bne.n	80025b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <TIM_OC3_SetConfig+0x108>)
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <TIM_OC3_SetConfig+0x10c>)
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b006      	add	sp, #24
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	fffffeff 	.word	0xfffffeff
 80025dc:	fffeff8f 	.word	0xfffeff8f
 80025e0:	fffffdff 	.word	0xfffffdff
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	fffff7ff 	.word	0xfffff7ff
 80025ec:	fffffbff 	.word	0xfffffbff
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	ffffefff 	.word	0xffffefff
 8002600:	ffffdfff 	.word	0xffffdfff

08002604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <TIM_OC4_SetConfig+0xb0>)
 800261a:	401a      	ands	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <TIM_OC4_SetConfig+0xb4>)
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <TIM_OC4_SetConfig+0xb8>)
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <TIM_OC4_SetConfig+0xbc>)
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <TIM_OC4_SetConfig+0xc0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_OC4_SetConfig+0x78>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <TIM_OC4_SetConfig+0xc4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_OC4_SetConfig+0x78>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <TIM_OC4_SetConfig+0xc8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_OC4_SetConfig+0x78>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <TIM_OC4_SetConfig+0xcc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <TIM_OC4_SetConfig+0xd0>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	ffffefff 	.word	0xffffefff
 80026b8:	feff8fff 	.word	0xfeff8fff
 80026bc:	fffffcff 	.word	0xfffffcff
 80026c0:	ffffdfff 	.word	0xffffdfff
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40014000 	.word	0x40014000
 80026cc:	40014400 	.word	0x40014400
 80026d0:	40014800 	.word	0x40014800
 80026d4:	ffffbfff 	.word	0xffffbfff

080026d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <TIM_OC5_SetConfig+0xa4>)
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <TIM_OC5_SetConfig+0xa8>)
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <TIM_OC5_SetConfig+0xac>)
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <TIM_OC5_SetConfig+0xb0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_OC5_SetConfig+0x6e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a16      	ldr	r2, [pc, #88]	; (800278c <TIM_OC5_SetConfig+0xb4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_OC5_SetConfig+0x6e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <TIM_OC5_SetConfig+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_OC5_SetConfig+0x6e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <TIM_OC5_SetConfig+0xbc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d109      	bne.n	800275a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a0c      	ldr	r2, [pc, #48]	; (800277c <TIM_OC5_SetConfig+0xa4>)
 800274a:	4013      	ands	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b006      	add	sp, #24
 800277a:	bd80      	pop	{r7, pc}
 800277c:	fffeffff 	.word	0xfffeffff
 8002780:	fffeff8f 	.word	0xfffeff8f
 8002784:	fffdffff 	.word	0xfffdffff
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40014000 	.word	0x40014000
 8002790:	40014400 	.word	0x40014400
 8002794:	40014800 	.word	0x40014800

08002798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <TIM_OC6_SetConfig+0xa8>)
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <TIM_OC6_SetConfig+0xac>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <TIM_OC6_SetConfig+0xb0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	051b      	lsls	r3, r3, #20
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a18      	ldr	r2, [pc, #96]	; (800284c <TIM_OC6_SetConfig+0xb4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <TIM_OC6_SetConfig+0x70>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <TIM_OC6_SetConfig+0xb8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <TIM_OC6_SetConfig+0x70>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a16      	ldr	r2, [pc, #88]	; (8002854 <TIM_OC6_SetConfig+0xbc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_OC6_SetConfig+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <TIM_OC6_SetConfig+0xc0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <TIM_OC6_SetConfig+0xc4>)
 800280c:	4013      	ands	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	029b      	lsls	r3, r3, #10
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	ffefffff 	.word	0xffefffff
 8002844:	feff8fff 	.word	0xfeff8fff
 8002848:	ffdfffff 	.word	0xffdfffff
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40014000 	.word	0x40014000
 8002854:	40014400 	.word	0x40014400
 8002858:	40014800 	.word	0x40014800
 800285c:	fffbffff 	.word	0xfffbffff

08002860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	2201      	movs	r2, #1
 8002878:	4393      	bics	r3, r2
 800287a:	001a      	movs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	22f0      	movs	r2, #240	; 0xf0
 800288a:	4393      	bics	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	220a      	movs	r2, #10
 800289c:	4393      	bics	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	621a      	str	r2, [r3, #32]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}

080028bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2210      	movs	r2, #16
 80028d4:	4393      	bics	r3, r2
 80028d6:	001a      	movs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <TIM_TI2_ConfigInputStage+0x60>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	22a0      	movs	r2, #160	; 0xa0
 80028f8:	4393      	bics	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b006      	add	sp, #24
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	ffff0fff 	.word	0xffff0fff

08002920 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <TIM_ITRx_SetConfig+0x34>)
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	2207      	movs	r2, #7
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	ffcfff8f 	.word	0xffcfff8f

08002958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <TIM_ETR_SetConfig+0x3c>)
 8002970:	4013      	ands	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	431a      	orrs	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b006      	add	sp, #24
 8002992:	bd80      	pop	{r7, pc}
 8002994:	ffff00ff 	.word	0xffff00ff

08002998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	223c      	movs	r2, #60	; 0x3c
 80029a6:	5c9b      	ldrb	r3, [r3, r2]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e04f      	b.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	223c      	movs	r2, #60	; 0x3c
 80029b4:	2101      	movs	r1, #1
 80029b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	223d      	movs	r2, #61	; 0x3d
 80029bc:	2102      	movs	r1, #2
 80029be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029de:	4013      	ands	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2270      	movs	r2, #112	; 0x70
 80029f0:	4393      	bics	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10c      	bne.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	4393      	bics	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	; 0x3d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223c      	movs	r2, #60	; 0x3c
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	ff0fffff 	.word	0xff0fffff
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40014000 	.word	0x40014000

08002a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <memset>:
 8002a98:	0003      	movs	r3, r0
 8002a9a:	1882      	adds	r2, r0, r2
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <memset+0xa>
 8002aa0:	4770      	bx	lr
 8002aa2:	7019      	strb	r1, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	e7f9      	b.n	8002a9c <memset+0x4>

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4c0c      	ldr	r4, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4d0d      	ldr	r5, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	2600      	movs	r6, #0
 8002aba:	f000 f819 	bl	8002af0 <_init>
 8002abe:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4d0a      	ldr	r5, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	00b3      	lsls	r3, r6, #2
 8002ace:	58eb      	ldr	r3, [r5, r3]
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	00b3      	lsls	r3, r6, #2
 8002ad8:	58eb      	ldr	r3, [r5, r3]
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b9c 	.word	0x08002b9c
 8002ae4:	08002b9c 	.word	0x08002b9c
 8002ae8:	08002ba0 	.word	0x08002ba0
 8002aec:	08002b9c 	.word	0x08002b9c

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
